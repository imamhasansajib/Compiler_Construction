E -> E + T | T
T -> T - F | F
F -> E | id
id -> a | b | c


def parse_grammar(input_lines):
    productions = {}

    for line in input_lines:
        line = line.strip()
        if not line:
            break

        nonterminal, production = line.split('->')
        nonterminal = nonterminal.strip()
        production = [p.strip() for p in production.split('|')]

        if nonterminal in productions:
            productions[nonterminal].extend(production)
        else:
            productions[nonterminal] = production

    return productions

def eliminate_left_recursion(productions, nonterminal):
    if nonterminal not in productions:
        return

    new_productions = []
    recursive_productions = []
    nonrecursive_productions = []

    for production in productions[nonterminal]:
        if production.startswith(nonterminal):
            recursive_productions.append(production[len(nonterminal):])
        else:
            nonrecursive_productions.append(production)

    if len(recursive_productions) > 0:
        new_nonterminal = nonterminal + "'"
        for production in nonrecursive_productions:
            new_productions.append(production + new_nonterminal)

        productions[nonterminal] = new_productions

        for production in recursive_productions:
            productions.setdefault(new_nonterminal, []).append(production + new_nonterminal)
        productions.setdefault(new_nonterminal, []).append("Îµ")

        eliminate_left_recursion(productions, new_nonterminal)
    else:
        return

def print_grammar(productions):
    primed_versions = set()  # To store the primed versions that have already been printed

    # Print the productions for nonterminals and their primed versions
    for nonterminal, production in productions.items():
        if nonterminal not in primed_versions:
            print(f"{nonterminal} -> {' | '.join(production)}")

            # Check if there is a primed version of the current nonterminal and print its productions
            primed_version = nonterminal + "'"
            if primed_version in productions and primed_version not in primed_versions:
                print(f"{primed_version} -> {' | '.join(productions[primed_version])}")
                primed_versions.add(primed_version)


def main():
    print("Enter the context-free grammar (one production per line, press Enter on an empty line to finish):")

    input_lines = []
    while True:
        line = input()
        if not line:
            break
        input_lines.append(line)

    productions = parse_grammar(input_lines)
    nonterminals = list(productions.keys())

    for nonterminal in nonterminals:
        eliminate_left_recursion(productions, nonterminal)

    print("Modified Grammar:")
    print_grammar(productions)

if __name__ == "__main__":
    main()
